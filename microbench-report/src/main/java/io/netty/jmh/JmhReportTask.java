/*
 * Copyright 2020 The Netty Project
 *
 * The Netty Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
package io.netty.jmh;

import io.netty.util.internal.logging.InternalLogger;
import io.netty.util.internal.logging.InternalLoggerFactory;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

public final class JmhReportTask {
    private static final InternalLogger logger = InternalLoggerFactory.getInstance(JmhReportTask.class);

    private JmhReportTask() { }

    public static void main(String[] args) {
        logger.info("{}", Arrays.toString(args));
        String jmhResultPath = args[0];
        String jmhReportOutput = args[1];

        buildReport(jmhResultPath, jmhReportOutput);
    }

    static void buildReport(String jmhResultFolder, String targetFolder) {
        final File reportFolder = new File(jmhResultFolder);
        final File outputFolder = new File(targetFolder);

        if (!reportFolder.exists()) {
            logger.error("Input '{}' does not exists!", reportFolder.toString());
            return;
        }

        if (!outputFolder.exists()) {
            logger.error("Input '{}' does not exists!", outputFolder.toString());
            return;
        }

        if (!outputFolder.isDirectory()) {
            logger.error("Input '{}' should be a directory!%n", outputFolder.toString());
            return;
        }

        final File aggregatedReportFolder = new File(targetFolder, "aggregated-report");

        if (!aggregatedReportFolder.exists()) {
            try {
                Files.createDirectory(aggregatedReportFolder.toPath());
            } catch (IOException e) {
                logger.error("Could not create directory '{}'!", aggregatedReportFolder.toString());
                logger.error(e.getMessage(), e);
                return;
            }
        }

        final File jmhVisualizerFolder = new File(targetFolder, "jmh-visualizer");

        if (!jmhVisualizerFolder.exists()) {
            try {
                Files.createDirectory(jmhVisualizerFolder.toPath());
            } catch (IOException e) {
                logger.error("Could not create directory '{}'", jmhVisualizerFolder.toString());
                logger.error(e.getMessage(), e);
                return;
            }
        }

        final ZonedDateTime now = ZonedDateTime.now(ZoneOffset.UTC);
        final File oneReportFile = new File(aggregatedReportFolder, "report-" + now + ".json");
        try (BufferedWriter bw = Files.newBufferedWriter(oneReportFile.toPath())) {
            bw.write("// generated by jmh-report-task " + now);
            bw.newLine();
            bw.write("[");
            bw.newLine();
            try (Stream<Path> reportFileStream = Files.list(reportFolder.toPath())) {
                reportFileStream.forEach(reportFile -> {

                    try {
                        String reportFileContent = Files.readString(reportFile, StandardCharsets.UTF_8);

                        if (reportFileContent.isEmpty()) {
                            return;
                        }

                        reportFileContent = reportFileContent.substring(
                                reportFileContent.indexOf("[") + 1, reportFileContent.lastIndexOf("]"));

                        bw.write(reportFileContent);
                        bw.write(",");
                        bw.newLine();
                    } catch (IOException e) {
                        logger.error(e.getMessage(), e);
                    }
                });
            }
            bw.write("]");
            bw.newLine();
        } catch (IOException e) {
            logger.error(e.getMessage(), e);
            return;
        }

        final File providedJsFile = new File(jmhVisualizerFolder, "provided.js");
        List<Path> benchmarks = new ArrayList<>();
        try (Stream<Path> benchmarkPathStream = Files.list(aggregatedReportFolder.toPath())) {
            benchmarkPathStream.forEach(benchmarks::add);
        } catch (IOException e) {
            logger.error(e.getMessage(), e);
            return;
        }

        try (InputStream jmhVisualizerZip = JmhReportTask.class.getResourceAsStream("/jmh-visualizer.zip");
             ZipInputStream zipStream = new ZipInputStream(jmhVisualizerZip)) {
            extract(zipStream, jmhVisualizerFolder);
        } catch (IOException e) {
            logger.error(e.getMessage(), e);
            return;
        }

        try (PrintWriter writer = new PrintWriter(providedJsFile)) {

            writer.println("// provided.js - generated by jmh-report-task, "
                    + (new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS",
                    Locale.getDefault()).format(new Date(System.currentTimeMillis()))));
            writer.println();

            final Map<String, String> providedBenchmarkStore = new HashMap<>();
            for (Path benchmark : benchmarks) {
               String variableName = benchmark.toFile().getName();

                variableName = variableName.contains(".") ?
                        variableName.substring(0, variableName.lastIndexOf(".")) : variableName;

                if (Files.size(benchmark) > 0) {
                    providedBenchmarkStore.put(variableName, Files.readString(benchmark));
                }
            }

            final List<String> quotedNames = providedBenchmarkStore.keySet()
                    .stream().map(name -> "'" + name + "'").collect(Collectors.toList());

            writer.println(String.format("var providedBenchmarks = [%s];", String.join(",", quotedNames)));
            writer.println();
            writer.println("var providedBenchmarkStore = {");

            for (Map.Entry<String, String> entry: providedBenchmarkStore.entrySet()) {
                writer.println(String.format("'%s': %s,", entry.getKey(), entry.getValue()));
            }

            writer.println("};");
        } catch (IOException e) {
            logger.error(e.getMessage(), e);
            return;
        }

        logger.error("JMH Report generated, please open: file://{}/index.html", jmhVisualizerFolder);
    }

    static void extract(ZipInputStream zipInputStream, File targetDirectory) throws IOException {
        while (true) {
            ZipEntry entry = zipInputStream.getNextEntry();
            if (entry == null) {
                break;
            }
            File entryFile = new File(targetDirectory, entry.getName());
            if (entry.isDirectory()) {
                entryFile.mkdirs();
            } else {
                final FileOutputStream fileOutputStream = new FileOutputStream(entryFile);
                zipInputStream.transferTo(fileOutputStream);
            }
        }
    }
}
